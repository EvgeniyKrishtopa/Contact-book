{"version":3,"sources":["pages/Homepage/isLoggedUser/styles.module.scss","components/Input/index.tsx","utils/index.tsx","pages/Homepage/isLoggedUser/contactItem/styles.module.scss","store/actions/Contacts/actions.ts","components/ContactForm/index.tsx","pages/Homepage/isLoggedUser/contactItem/index.tsx","pages/Homepage/isLoggedUser/contactsList/index.tsx","pages/Homepage/isLoggedUser/selectContact/index.tsx","pages/Homepage/isLoggedUser/statusToggler/index.tsx","pages/Homepage/isLoggedUser/index.tsx"],"names":["module","exports","Input","input","type","placeholder","className","meta","touched","error","warning","classNameHandler","validate","values","errors","contactName","length","contactEmail","test","contactPhone","userLogin","userEmail","userPassword","db","firebase","firestore","FetchCurrentUserContacts","id","dispatch","collection","doc","onSnapshot","snapshot","contactItems","docs","map","item","contact","data","GET_CURRENT_USER_CONTACTS","contactsData","FetchContacts","SendContact","userId","SEND_CONTACT_STARTED","loading","add","activeStatus","visibility","then","SEND_CONTACT_SUCCESS","catch","SEND_CONTACT_ERROR","contactSendError","filterContactsByStatus","filteredContacts","FILTERED_CONTACT_BY_STATUS","ContactForm","reduxForm","form","onSubmitSuccess","_result","_props","reset","handleSubmit","submitting","pristine","onSubmit","Field","name","component","disabled","ContactItem","useContext","CurrentUserContext","userData","uid","useDispatch","styles","contactItem","activeContact","inActiveContact","visibleContact","hiddenContact","contactItemHolder","contactData","icon","size","href","contactHandlers","onClick","a","update","CHANGE_CONTACT_STATUS","changeContactStatus","active","inActive","delete","DELETE_USER_CONTACT","deleteContactFromBook","React","memo","ContactList","contacts","filterdContacts","filter","contactBlock","key","SelectContact","useState","selectedOption","setSelectedOption","options","label","value","selectContactBlock","onChange","FILTERED_CONTACT_BY_EMAIL","filterContact","defaultValue","StatusToggler","filters","textContent","contactStatusFilters","setContactStatusFilters","handleContactsByStatus","e","preventDefault","currentFilters","currentTarget","contactStatusFilter","contactsToggler","ContactsWidgets","contactList","IsLogginedUserPage","user","history","useHistory","userContacts","useSelector","state","getCurrentUserContacts","useEffect","contactsPage","displayName","formBlock","btnHolder","LogOut","logOutHandler","push"],"mappings":"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","file":"static/js/4.792a6cbc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsPage\":\"styles_contactsPage__1MdS2\",\"formBlock\":\"styles_formBlock__qbw7D\",\"contactBlock\":\"styles_contactBlock__20K6O\",\"selectContactBlock\":\"styles_selectContactBlock__1NeRy\",\"contactStatusFilter\":\"styles_contactStatusFilter__2mIT6\",\"active\":\"styles_active__2agaD\",\"contactsToggler\":\"styles_contactsToggler__1eWYV\",\"btnHolder\":\"styles_btnHolder__URat3\"};","import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\n\r\ninterface IInputProps {\r\n  type: string;\r\n  className: string;\r\n  placeholder: string;\r\n}\r\n\r\nconst Input: React.FC<WrappedFieldProps & IInputProps> = ({\r\n  input,\r\n  type,\r\n  placeholder,\r\n  className,\r\n  meta: { touched, error, warning },\r\n}) => {\r\n  const classNameHandler =\r\n    (touched && error) || warning ? `${className} error` : className;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        {...input}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        className={classNameHandler}\r\n      />\r\n      {touched &&\r\n        ((error && <span className=\"error-field-message\">{error}</span>) ||\r\n          (warning && (\r\n            <span className=\"warning-error-message\">{warning}</span>\r\n          )))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","interface Values {\r\n  contactName?: string | null;\r\n  contactEmail?: string | null;\r\n  contactPhone?: string | null;\r\n  userLogin?: string | null;\r\n  userEmail?: string | null;\r\n  userPassword?: string | null;\r\n}\r\n\r\ninterface Errors {\r\n  userLogin?: string;\r\n  userEmail?: string;\r\n  userPassword?: string;\r\n  contactName?: string;\r\n  contactEmail?: string;\r\n  contactPhone?: string;\r\n}\r\n\r\nexport const validate = (values: Values): Errors => {\r\n  const errors: Errors = {};\r\n  if (!values.contactName) {\r\n    errors.contactName = 'This field is required!';\r\n  } else if (values.contactName.length > 15) {\r\n    errors.contactName = 'Must be 15 characters or less';\r\n  }\r\n  if (!values.contactEmail) {\r\n    errors.contactEmail = 'This field is required!';\r\n  } else if (\r\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.contactEmail)\r\n  ) {\r\n    errors.contactEmail = 'Invalid email address!';\r\n  }\r\n\r\n  if (!values.contactPhone) {\r\n    errors.contactPhone = 'This field is required!';\r\n  } else if (\r\n    !/^\\+[0-9]{3}\\s\\((\\d+)\\)-\\d{3}-\\d{2}-\\d{2}/i.test(values.contactPhone)\r\n  ) {\r\n    errors.contactPhone = 'Invalid phone number!';\r\n  }\r\n\r\n  if (!values.userLogin) {\r\n    errors.userLogin = 'This field is required!';\r\n  } else if (values.userLogin.length > 15) {\r\n    errors.userLogin = 'Must be 15 characters or less';\r\n  }\r\n  if (!values.userEmail) {\r\n    errors.userEmail = 'This field is required!';\r\n  } else if (\r\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.userEmail)\r\n  ) {\r\n    errors.userEmail = 'Invalid email address!';\r\n  }\r\n\r\n  if (!values.userPassword) {\r\n    errors.userPassword = 'This field is required!';\r\n  } else if (values.userPassword.length < 6) {\r\n    errors.userPassword = 'Must be 6 characters or more';\r\n  }\r\n  return errors;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"styles_contactItem__3HEVS\",\"activeContact\":\"styles_activeContact__3xv5e\",\"inActiveContact\":\"styles_inActiveContact__2C-2X\",\"hiddenContact\":\"styles_hiddenContact__32Y0y\",\"visibleContact\":\"styles_visibleContact__3j-wW\",\"contactItemHolder\":\"styles_contactItemHolder__IdJ-8\",\"contactData\":\"styles_contactData__30DQ7\",\"contactName\":\"styles_contactName__13Wij\",\"contactEmail\":\"styles_contactEmail__1FZhE\",\"contactPhone\":\"styles_contactPhone__2HZQ9\",\"contactHandlers\":\"styles_contactHandlers__1OpQT\",\"active\":\"styles_active__3zILD\",\"inActive\":\"styles_inActive__AObw9\"};","import firebase from 'store/firebase';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from 'store/reducers';\r\nimport { ContactActionTypes } from './types';\r\nimport { IError, IContact } from 'typings/interfaces';\r\n\r\nimport {\r\n  SEND_CONTACT_STARTED,\r\n  SEND_CONTACT_SUCCESS,\r\n  SEND_CONTACT_ERROR,\r\n  GET_CURRENT_USER_CONTACTS,\r\n  DELETE_USER_CONTACT,\r\n  FILTERED_CONTACT_BY_EMAIL,\r\n  CHANGE_CONTACT_STATUS,\r\n  FILTERED_CONTACT_BY_STATUS,\r\n} from 'store/constants';\r\n\r\nconst db = firebase.firestore();\r\n\r\ntype ThunkType = ThunkAction<void, RootState, unknown, ContactActionTypes>;\r\n\r\nconst FetchContacts = (contactItems: any): ContactActionTypes => {\r\n  return {\r\n    type: GET_CURRENT_USER_CONTACTS,\r\n    contactsData: contactItems,\r\n  };\r\n};\r\n\r\nexport const FetchCurrentUserContacts = (id: string): ThunkType => {\r\n  return dispatch => {\r\n    db.collection('users')\r\n      .doc(id)\r\n      .collection('Contacts')\r\n      .onSnapshot(snapshot => {\r\n        const contactItems = snapshot.docs.map(item => {\r\n          const contact = item.data();\r\n          contact.id = item.id;\r\n          return contact;\r\n        });\r\n\r\n        dispatch(FetchContacts(contactItems));\r\n      });\r\n  };\r\n};\r\n\r\nconst contactSendStarted = (): ContactActionTypes => {\r\n  return {\r\n    type: SEND_CONTACT_STARTED,\r\n    loading: true,\r\n  };\r\n};\r\n\r\nconst contactSendSuccess = (): ContactActionTypes => {\r\n  return {\r\n    type: SEND_CONTACT_SUCCESS,\r\n    loading: false,\r\n    error: null,\r\n  };\r\n};\r\n\r\nconst contactSendError = (error: IError): ContactActionTypes => {\r\n  return {\r\n    type: SEND_CONTACT_ERROR,\r\n    error,\r\n  };\r\n};\r\n\r\nexport const SendContact = (\r\n  contactName: string,\r\n  contactEmail: string,\r\n  contactPhone: string,\r\n  userId: string,\r\n): ThunkType => {\r\n  return dispatch => {\r\n    dispatch(contactSendStarted());\r\n    db.collection('users')\r\n      .doc(userId)\r\n      .collection('Contacts')\r\n      .add({\r\n        contactName,\r\n        contactEmail,\r\n        contactPhone,\r\n        activeStatus: true,\r\n        visibility: true,\r\n      })\r\n      .then(() => {\r\n        dispatch(contactSendSuccess());\r\n      })\r\n      .catch(error => {\r\n        dispatch(contactSendError(error));\r\n      });\r\n  };\r\n};\r\n\r\nconst deleteContact = (): ContactActionTypes => {\r\n  return {\r\n    type: DELETE_USER_CONTACT,\r\n  };\r\n};\r\n\r\nexport const deleteContactFromBook = (\r\n  id: string,\r\n  userId: string,\r\n): ThunkType => {\r\n  return async dispatch => {\r\n    db.collection('users')\r\n      .doc(userId)\r\n      .collection('Contacts')\r\n      .doc(id)\r\n      .delete()\r\n      .then(() => dispatch(deleteContact()));\r\n  };\r\n};\r\n\r\nexport const filterContact = (\r\n  filteredContacts: Array<IContact>,\r\n): ContactActionTypes => {\r\n  return {\r\n    type: FILTERED_CONTACT_BY_EMAIL,\r\n    contactsData: filteredContacts,\r\n  };\r\n};\r\n\r\nconst changeContact = (): ContactActionTypes => {\r\n  return {\r\n    type: CHANGE_CONTACT_STATUS,\r\n  };\r\n};\r\n\r\nexport const changeContactStatus = (\r\n  id: string,\r\n  userId: string,\r\n  activeStatus: boolean,\r\n): ThunkType => {\r\n  return async dispatch => {\r\n    db.collection('users')\r\n      .doc(userId)\r\n      .collection('Contacts')\r\n      .doc(id)\r\n      .update({ activeStatus: !activeStatus })\r\n      .then(() => dispatch(changeContact()));\r\n  };\r\n};\r\n\r\nexport const filterContactsByStatus = (\r\n  filteredContacts: Array<IContact>,\r\n): ContactActionTypes => {\r\n  return {\r\n    type: FILTERED_CONTACT_BY_STATUS,\r\n    contactsData: filteredContacts,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { Field, reduxForm, InjectedFormProps, reset } from 'redux-form';\r\nimport { IContactSendData } from 'pages/Homepage/isLoggedUser/';\r\nimport Input from 'components/Input';\r\nimport { validate } from 'utils';\r\n\r\nconst Form: React.FC<InjectedFormProps<IContactSendData>> = ({\r\n  handleSubmit,\r\n  submitting,\r\n  pristine,\r\n}) => {\r\n  return (\r\n    <form className=\"form-styles\" onSubmit={handleSubmit}>\r\n      <div className=\"input-holder\">\r\n        <label className=\"form-label\">\r\n          Contact Name\r\n          <Field\r\n            type=\"text\"\r\n            name=\"contactName\"\r\n            className=\"form-control\"\r\n            placeholder=\"Contact Name\"\r\n            component={Input}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"input-holder\">\r\n        <label className=\"form-label\">\r\n          Contact Email\r\n          <Field\r\n            type=\"email\"\r\n            name=\"contactEmail\"\r\n            className=\"form-control\"\r\n            placeholder=\"ContactEmail\"\r\n            component={Input}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"input-holder\">\r\n        <label className=\"form-label\">\r\n          Contact Phone\r\n          <Field\r\n            type=\"tel\"\r\n            name=\"contactPhone\"\r\n            className=\"form-control\"\r\n            placeholder=\"+380 (XX)-XXX-XX-XX\"\r\n            component={Input}\r\n          />\r\n        </label>\r\n      </div>\r\n      <button\r\n        type=\"submit\"\r\n        disabled={pristine || submitting}\r\n        className=\"btn btn-primary\"\r\n      >\r\n        Submit Contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ContactForm = reduxForm<IContactSendData>({\r\n  form: 'contactForm',\r\n  validate,\r\n  onSubmitSuccess: (_result, dispatch, _props) =>\r\n    dispatch(reset('contactForm')),\r\n})(Form);\r\n\r\nexport default ContactForm;\r\n","import React, { useContext } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  deleteContactFromBook,\r\n  changeContactStatus,\r\n} from 'store/actions/Contacts/actions';\r\nimport MaterialIcon from 'material-icons-react';\r\nimport styles from './styles.module.scss';\r\nimport { IContact } from 'typings/interfaces';\r\nimport { CurrentUserContext } from 'context';\r\n\r\nconst ContactItem: React.FC<IContact> = ({\r\n  contactEmail,\r\n  contactName,\r\n  contactPhone,\r\n  activeStatus,\r\n  id,\r\n  visibility,\r\n}) => {\r\n  const { userData } = useContext(CurrentUserContext);\r\n  const userId: string = userData.uid;\r\n  const dispatch = useDispatch();\r\n\r\n  const deleteContactHandler = () => {\r\n    dispatch(deleteContactFromBook(id, userId));\r\n  };\r\n\r\n  const changeStatusContactHandler = () => {\r\n    dispatch(changeContactStatus(id, userId, activeStatus));\r\n  };\r\n\r\n  return (\r\n    <li\r\n      className={`${styles.contactItem} \r\n      ${activeStatus ? styles.activeContact : styles.inActiveContact}\r\n      ${visibility ? styles.visibleContact : styles.hiddenContact}\r\n      `}\r\n    >\r\n      <div className={styles.contactItemHolder}>\r\n        <div className={styles.contactData}>\r\n          <span className={styles.contactName}>\r\n            <MaterialIcon icon=\"account_box\" size=\"30\" />\r\n            {contactName}\r\n          </span>\r\n          <a href={`mailto:${contactEmail}`} className={styles.contactEmail}>\r\n            <MaterialIcon icon=\"contact_mail\" size=\"30\" />\r\n            {contactEmail}\r\n          </a>\r\n          <a href={`tel:${contactPhone}`} className={styles.contactPhone}>\r\n            <MaterialIcon icon=\"contact_phone\" size=\"30\" />\r\n            {contactPhone}\r\n          </a>\r\n        </div>\r\n        <div className={styles.contactHandlers}>\r\n          <button\r\n            onClick={changeStatusContactHandler}\r\n            className={`${activeStatus ? styles.active : styles.inActive}`}\r\n          >\r\n            <MaterialIcon icon=\"check_box\" size=\"30\" />\r\n          </button>\r\n          <button onClick={deleteContactHandler}>\r\n            <MaterialIcon icon=\"delete\" size=\"30\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContactItem);\r\n","import React from 'react';\r\nimport styles from '../styles.module.scss';\r\nimport ContactItem from '../contactItem';\r\nimport { IContact } from 'typings/interfaces';\r\n\r\nconst ContactList: React.FC<{ contacts: Array<IContact> }> = ({ contacts }) => {\r\n  const filterdContacts = contacts.filter(item => item.visibility === true);\r\n\r\n  return (\r\n    <div className={styles.contactBlock}>\r\n      {filterdContacts.length >= 1 && (\r\n        <>\r\n          <h3 className=\"center\">Your contacts:</h3>\r\n          <ul>\r\n            {contacts.map(\r\n              ({\r\n                contactEmail,\r\n                contactName,\r\n                contactPhone,\r\n                activeStatus,\r\n                id,\r\n                visibility,\r\n              }) => {\r\n                return (\r\n                  <ContactItem\r\n                    contactEmail={contactEmail}\r\n                    contactName={contactName}\r\n                    contactPhone={contactPhone}\r\n                    activeStatus={activeStatus}\r\n                    id={id}\r\n                    key={id}\r\n                    visibility={visibility}\r\n                  />\r\n                );\r\n              },\r\n            )}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContactList);\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styles from '../styles.module.scss';\r\nimport Select from 'react-select';\r\nimport { filterContact } from 'store/actions/Contacts/actions';\r\nimport { IContact } from 'typings/interfaces';\r\n\r\nconst SelectContact: React.FC<{ contacts: Array<IContact> }> = ({\r\n  contacts,\r\n}) => {\r\n  const [selectedOption, setSelectedOption] = useState<null | string>(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = ({ value }) => {\r\n    setSelectedOption(value);\r\n\r\n    const filteredContacts = contacts.map(item => {\r\n      if (item.contactEmail !== value) {\r\n        item.visibility = false;\r\n      }\r\n\r\n      return item;\r\n    });\r\n\r\n    dispatch(filterContact(filteredContacts));\r\n  };\r\n\r\n  const options = contacts\r\n    .map(item => item.contactEmail)\r\n    .map(item => ({ label: item, value: item }));\r\n\r\n  return (\r\n    <div className={styles.selectContactBlock}>\r\n      <h3 className=\"center\">Select contact by Email</h3>\r\n      <Select\r\n        onChange={handleChange}\r\n        defaultValue={selectedOption}\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SelectContact);\r\n","import React, { useState } from 'react';\r\nimport styles from '../styles.module.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport { IContact } from 'typings/interfaces';\r\nimport { filterContactsByStatus } from 'store/actions/Contacts/actions';\r\n\r\ninterface IFilter {\r\n  textContent: string;\r\n  id: number;\r\n  className: string;\r\n}\r\n\r\nconst StatusToggler: React.FC<{ contacts: Array<IContact> }> = ({\r\n  contacts,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const filters: Array<IFilter> = [\r\n    {\r\n      textContent: 'Active',\r\n      id: 1,\r\n      className: '',\r\n    },\r\n    {\r\n      textContent: 'Inactive',\r\n      id: 2,\r\n      className: '',\r\n    },\r\n    {\r\n      textContent: 'All',\r\n      id: 3,\r\n      className: `${styles.active}`,\r\n    },\r\n  ];\r\n\r\n  const [contactStatusFilters, setContactStatusFilters] = useState<\r\n    Array<IFilter>\r\n  >(filters);\r\n\r\n  const handleContactsByStatus = (e: React.MouseEvent<HTMLAnchorElement>) => {\r\n    e.preventDefault();\r\n\r\n    const currentFilters = filters.map(item => {\r\n      item.className = '';\r\n      if (item.textContent === e.currentTarget.textContent) {\r\n        item.className = `${styles.active}`;\r\n      }\r\n      return item;\r\n    });\r\n\r\n    setContactStatusFilters(currentFilters);\r\n\r\n    if (e.currentTarget.textContent === 'Active') {\r\n      const filteredContacts = contacts.map(item => {\r\n        item.visibility = false;\r\n\r\n        if (item.activeStatus) {\r\n          item.visibility = true;\r\n        }\r\n\r\n        return item;\r\n      });\r\n\r\n      dispatch(filterContactsByStatus(filteredContacts));\r\n    }\r\n\r\n    if (e.currentTarget.textContent === 'Inactive') {\r\n      const filteredContacts = contacts.map(item => {\r\n        item.visibility = false;\r\n\r\n        if (!item.activeStatus) {\r\n          item.visibility = true;\r\n        }\r\n\r\n        return item;\r\n      });\r\n\r\n      dispatch(filterContactsByStatus(filteredContacts));\r\n    }\r\n\r\n    if (e.currentTarget.textContent === 'All') {\r\n      const filteredContacts = contacts.map(item => {\r\n        item.visibility = true;\r\n        return item;\r\n      });\r\n\r\n      dispatch(filterContactsByStatus(filteredContacts));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.contactStatusFilter}>\r\n      <h3 className=\"center\">Filter contacts by status:</h3>\r\n      <ul className={styles.contactsToggler}>\r\n        {contactStatusFilters.map(({ textContent, id, className }) => {\r\n          return (\r\n            <li key={id}>\r\n              <a\r\n                href=\"/\"\r\n                onClick={handleContactsByStatus}\r\n                className={className}\r\n              >\r\n                {textContent}\r\n              </a>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(StatusToggler);\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LogOut } from 'store/actions/Users/actions';\r\nimport {\r\n  SendContact,\r\n  FetchCurrentUserContacts,\r\n} from 'store/actions/Contacts/actions';\r\nimport styles from './styles.module.scss';\r\nimport ContactForm from 'components/ContactForm';\r\nimport ContactList from './contactsList';\r\nimport SelectContact from './selectContact';\r\nimport StatusToggler from './statusToggler';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getCurrentUserContacts } from 'selectors';\r\nimport { RootState } from 'store/reducers';\r\nimport { IContacts, IContact } from 'typings/interfaces';\r\n\r\nexport interface IContactSendData {\r\n  contactName: string;\r\n  contactEmail: string;\r\n  contactPhone: string;\r\n}\r\n\r\nconst ContactsWidgets: React.FC<{ contactList: Array<IContact> }> = ({\r\n  contactList,\r\n}) => {\r\n  return (\r\n    <>\r\n      {contactList.length > 1 && (\r\n        <>\r\n          <SelectContact contacts={contactList} />\r\n          <StatusToggler contacts={contactList} />\r\n        </>\r\n      )}\r\n      {contactList.length > 0 && <ContactList contacts={contactList} />}\r\n    </>\r\n  );\r\n};\r\n\r\nconst IsLogginedUserPage: React.FC<any> = ({ user }) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const userContacts = useSelector<RootState, IContacts>(state =>\r\n    getCurrentUserContacts(state),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(FetchCurrentUserContacts(user.uid));\r\n  }, [user, dispatch]);\r\n\r\n  const signOut = () => {\r\n    async function logOutHandler() {\r\n      await dispatch(LogOut());\r\n    }\r\n    logOutHandler().then(() => history.push('/'));\r\n  };\r\n\r\n  const formSubmit = ({\r\n    contactName,\r\n    contactEmail,\r\n    contactPhone,\r\n  }: IContactSendData) => {\r\n    dispatch(SendContact(contactName, contactEmail, contactPhone, user.uid));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.contactsPage}>\r\n      <div className=\"container\">\r\n        <h2 className=\"center\">{user && `Hello, ${user.displayName}`}</h2>\r\n        <div className={styles.formBlock}>\r\n          <h3 className=\"center\">Add New Contact</h3>\r\n          <ContactForm onSubmit={formSubmit} />\r\n        </div>\r\n        {userContacts.contactsData ? (\r\n          <ContactsWidgets contactList={userContacts.contactsData} />\r\n        ) : (\r\n          <p>Loading...</p>\r\n        )}\r\n        <div className={styles.btnHolder}>\r\n          <button className=\"btn\" onClick={signOut}>\r\n            Log Out\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(IsLogginedUserPage);\r\n"],"sourceRoot":""}