{"version":3,"sources":["components/Input/index.tsx","utils/index.tsx","pages/Authentication/styles.module.scss","components/AuthForm/index.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","pages/Authentication/index.tsx"],"names":["Input","input","type","placeholder","className","meta","touched","error","warning","classNameHandler","validate","values","errors","contactName","length","contactEmail","test","contactPhone","userLogin","userEmail","userPassword","module","exports","AuthForm","reduxForm","form","onSubmitSuccess","_result","dispatch","_props","reset","isLogin","buttonText","props","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","handleSubmit","submitting","pristine","onSubmit","Field","name","component","disabled","React","memo","Authentication","match","useContext","CurrentUserContext","userData","useDispatch","path","pageTitle","useState","currentUserData","setCurrentUserData","errorNotification","setErrorNotification","useEffect","to","LogIn","SignUp","styles","notificationError","message"],"mappings":"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","file":"static/js/6.76237165.chunk.js","sourcesContent":["import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\n\r\ninterface IInputProps {\r\n  type: string;\r\n  className: string;\r\n  placeholder: string;\r\n}\r\n\r\nconst Input: React.FC<WrappedFieldProps & IInputProps> = ({\r\n  input,\r\n  type,\r\n  placeholder,\r\n  className,\r\n  meta: { touched, error, warning },\r\n}) => {\r\n  const classNameHandler =\r\n    (touched && error) || warning ? `${className} error` : className;\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        {...input}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        className={classNameHandler}\r\n      />\r\n      {touched &&\r\n        ((error && <span className=\"error-field-message\">{error}</span>) ||\r\n          (warning && (\r\n            <span className=\"warning-error-message\">{warning}</span>\r\n          )))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","interface Values {\r\n  contactName?: string | null;\r\n  contactEmail?: string | null;\r\n  contactPhone?: string | null;\r\n  userLogin?: string | null;\r\n  userEmail?: string | null;\r\n  userPassword?: string | null;\r\n}\r\n\r\ninterface Errors {\r\n  userLogin?: string;\r\n  userEmail?: string;\r\n  userPassword?: string;\r\n  contactName?: string;\r\n  contactEmail?: string;\r\n  contactPhone?: string;\r\n}\r\n\r\nexport const validate = (values: Values): Errors => {\r\n  const errors: Errors = {};\r\n  if (!values.contactName) {\r\n    errors.contactName = 'This field is required!';\r\n  } else if (values.contactName.length > 15) {\r\n    errors.contactName = 'Must be 15 characters or less';\r\n  }\r\n  if (!values.contactEmail) {\r\n    errors.contactEmail = 'This field is required!';\r\n  } else if (\r\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.contactEmail)\r\n  ) {\r\n    errors.contactEmail = 'Invalid email address!';\r\n  }\r\n\r\n  if (!values.contactPhone) {\r\n    errors.contactPhone = 'This field is required!';\r\n  } else if (\r\n    !/^\\+[0-9]{3}\\s\\((\\d+)\\)-\\d{3}-\\d{2}-\\d{2}/i.test(values.contactPhone)\r\n  ) {\r\n    errors.contactPhone = 'Invalid phone number!';\r\n  }\r\n\r\n  if (!values.userLogin) {\r\n    errors.userLogin = 'This field is required!';\r\n  } else if (values.userLogin.length > 15) {\r\n    errors.userLogin = 'Must be 15 characters or less';\r\n  }\r\n  if (!values.userEmail) {\r\n    errors.userEmail = 'This field is required!';\r\n  } else if (\r\n    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.userEmail)\r\n  ) {\r\n    errors.userEmail = 'Invalid email address!';\r\n  }\r\n\r\n  if (!values.userPassword) {\r\n    errors.userPassword = 'This field is required!';\r\n  } else if (values.userPassword.length < 6) {\r\n    errors.userPassword = 'Must be 6 characters or more';\r\n  }\r\n  return errors;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationError\":\"styles_notificationError__d1ShG\"};","import React from 'react';\r\nimport { Field, reduxForm, InjectedFormProps, reset } from 'redux-form';\r\nimport Input from 'components/Input';\r\nimport { IUserAuthData } from 'pages/Authentication';\r\nimport { validate } from 'utils';\r\n\r\ninterface IProps {\r\n  isLogin: boolean;\r\n  buttonText: string;\r\n}\r\n\r\nconst Form: React.FC<InjectedFormProps<IUserAuthData, IProps> & IProps> = ({\r\n  isLogin,\r\n  buttonText,\r\n  ...props\r\n}) => {\r\n  const { handleSubmit, submitting, pristine } = props;\r\n\r\n  return (\r\n    <form className=\"form-styles\" onSubmit={handleSubmit}>\r\n      {!isLogin && (\r\n        <div className=\"input-holder\">\r\n          <label className=\"form-label\">\r\n            Your Login\r\n            <Field\r\n              type=\"text\"\r\n              name=\"userLogin\"\r\n              className=\"form-control\"\r\n              placeholder=\"Login\"\r\n              component={Input}\r\n            />\r\n          </label>\r\n        </div>\r\n      )}\r\n      <div className=\"input-holder\">\r\n        <label className=\"form-label\">\r\n          Your Email\r\n          <Field\r\n            type=\"email\"\r\n            name=\"userEmail\"\r\n            className=\"form-control\"\r\n            placeholder=\"Email\"\r\n            component={Input}\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className=\"input-holder\">\r\n        <label className=\"form-label\">\r\n          Your Password\r\n          <Field\r\n            type=\"password\"\r\n            name=\"userPassword\"\r\n            className=\"form-control\"\r\n            placeholder=\"Password\"\r\n            component={Input}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        disabled={pristine || submitting}\r\n        className=\"btn btn-primary\"\r\n      >\r\n        {buttonText}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AuthForm = reduxForm<IUserAuthData, IProps>({\r\n  form: 'Authform',\r\n  onSubmitSuccess: (_result, dispatch, _props) => dispatch(reset('Authform')),\r\n  validate,\r\n})(Form);\r\n\r\nexport default React.memo(AuthForm);\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import React, { useContext, useState, useEffect } from 'react';\r\nimport { CurrentUserContext } from 'context';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { LogIn, SignUp } from 'store/actions/Users/actions';\r\nimport AuthForm from 'components/AuthForm';\r\nimport styles from './styles.module.scss';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { IError } from 'typings/interfaces';\r\n\r\ntype RouteParams = {\r\n  match?: string | undefined;\r\n};\r\n\r\nexport interface IUserAuthData {\r\n  userEmail: string;\r\n  userPassword: string;\r\n  userLogin: string;\r\n}\r\n\r\nconst Authentication: React.FC<RouteComponentProps<RouteParams>> = ({\r\n  match,\r\n}) => {\r\n  const { userData, error } = useContext(CurrentUserContext);\r\n  const dispatch = useDispatch();\r\n  const isLogin = match.path === '/login';\r\n  const pageTitle = isLogin ? 'Log In' : 'Sign Up';\r\n  const buttonText = isLogin ? 'Login' : 'Register';\r\n\r\n  const [currentUserData, setCurrentUserData] = useState<any | null>(null);\r\n  const [errorNotification, setErrorNotification] = useState<IError | null>(\r\n    null,\r\n  );\r\n\r\n  useEffect(() => {\r\n    setCurrentUserData(userData);\r\n  }, [userData]);\r\n\r\n  useEffect(() => {\r\n    setErrorNotification(error);\r\n  }, [error]);\r\n\r\n  const formSubmit = ({\r\n    userEmail,\r\n    userPassword,\r\n    userLogin,\r\n  }: IUserAuthData) => {\r\n    if (isLogin) {\r\n      dispatch(LogIn(userEmail, userPassword));\r\n    }\r\n    if (!isLogin) {\r\n      dispatch(SignUp(userEmail, userPassword, userLogin));\r\n    }\r\n  };\r\n\r\n  if (currentUserData) {\r\n    return <Redirect to=\"/home\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-center\">\r\n      <div className=\"container\">\r\n        <h2 className=\"center\">{pageTitle}</h2>\r\n        <AuthForm\r\n          onSubmit={formSubmit}\r\n          isLogin={isLogin}\r\n          buttonText={buttonText}\r\n        />\r\n        {errorNotification && (\r\n          <p className={styles.notificationError}>\r\n            {errorNotification.message}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Authentication;\r\n"],"sourceRoot":""}